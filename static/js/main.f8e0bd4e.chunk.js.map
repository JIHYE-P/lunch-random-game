{"version":3,"sources":["App.js","utils/index.js","config.js","reportWebVitals.js","index.js"],"names":["MenuItem","name","props","className","ShuffleItem","SelectMenuItem","menu","onClick","select","initalMenus","menus","result","i","length","data","id","push","createMenuData","App","useState","setMenus","newMenu","setNewMenu","setResult","allSelected","setAllSelected","isPopup","setIsPopup","shuffleTarget","useRef","selectedMenus","filter","onSelect","map","shuffle","start","end","duration","render","finished","now","performance","items","a","j","x","Math","floor","random","shuffleArray","current","childNodes","requestAnimationFrame","move","time","timefraction","value","index","forEach","item","style","display","innerText","ref","_","xmlns","fill","viewBox","stroke","strokeLinecap","strokeLinejoin","strokeWidth","d","flag","onChange","target","placeholder","includes","alert","last","concat","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f8e0bd4e.chunk.js","sourcesContent":["import './App.scss';\nimport React, { useRef, useState } from 'react';\nimport MENUS from './config';\nimport {createMenuData, shuffleArray} from './utils';\n\nconst MenuItem = ({name, ...props}) => <span {...props} className=\"menu-list__item\">{name}</span>\nconst ShuffleItem = ({name, ...props}) => <span {...props} className=\"shuffle__item\">{name}</span> \nconst SelectMenuItem = ({menu, onClick}) => {\n  return <span \n    className={`menu-list__item ${menu.select ? 'menu-list__item--active' : ''}`} \n    onClick={() => onClick(menu)}\n  >{menu.name}</span>\n}\n\nconst initalMenus = createMenuData(MENUS);\n\nfunction App() {\n  const [menus, setMenus] = useState(initalMenus);\n  const [newMenu, setNewMenu] = useState('');\n  const [result, setResult] = useState('');\n  const [allSelected, setAllSelected] = useState(false);\n  const [isPopup, setIsPopup] = useState(false);\n\n  const shuffleTarget = useRef();\n  const selectedMenus = menus.filter(({select}) => select);\n\n  const onAddNewMenu = () => {\n    if(newMenu.length === 0) return;\n    const includes = menus.filter(menu => menu.name.includes(newMenu));\n    if(includes.length) return alert('이미 존재하는 메뉴입니다.');\n    setMenus(menus => {\n      const last = menus[menus.length-1];\n      return menus.concat({id: last.id+1, name: newMenu, select: true});\n    });\n    setNewMenu('');\n  }\n\n  const onSelect = ({id, select}) => {\n    setMenus(menus => menus.map(menu => {\n      if(menu.id === id) menu.select = !select;\n      return menu;\n    }))\n  }\n\n  const onAllSelect = () => {\n    let flag = allSelected;\n    if(!flag){\n      flag = true;\n      setAllSelected(flag);\n      setMenus(menus => menus.map(menu => ({...menu, select: flag})));\n    }else{\n      flag = false;\n      setAllSelected(flag);\n      setMenus(menus => menus.map(menu => ({...menu, select: flag})));\n    }\n  }\n\n  const onSelected = () => {\n    if(selectedMenus.length < 3) return alert('메뉴를 3개 이상 선택하세요.');\n    setIsPopup(!isPopup);\n  }\n\n  const shuffle = ({start, end, duration, render, finished}) => {\n    const now = performance.now();\n    const items = shuffleArray([...shuffleTarget.current.childNodes]);\n    requestAnimationFrame(function move(time){\n      let timefraction = (time - now) / duration;\n      const value = end * timefraction;\n      const index = Math.floor(value % items.length);\n      render(items, index);\n\n      if(timefraction > 1) finished(items[index]);\n      else requestAnimationFrame(move);\n    });\n  }\n  const onShuffle = () => {\n    shuffle({\n      start: 0,\n      end: 100, \n      duration: 3000, \n      render: (items, index) => {\n        if(!items[index]) return;\n        items.forEach(item => item.style.display = 'none');\n        items[index].style.display = 'block';\n      },\n      finished: (result) => setResult(result.innerText)\n    });\n  }\n\n  return <>\n    <main className='main'>\n      <h2 className='main__title'>오늘 뭐묵?</h2>\n      <p className='main__desc'>귀한 점심시간을 1분1초도 허투루 흘러가지 않도록 (먹기 싫어도 먹어야함)</p>\n      \n      {selectedMenus.length \n      ? <>\n        <section className='section'>\n          <div className=\"section__menu\">\n            <h4>선택한 메뉴</h4>\n            <div className=\"menu-list\">\n              {menus.map((menu, id) => menu.select ? <MenuItem key={`menu${id}`} name={menu.name} /> : null)}\n            </div>\n          </div> \n        </section>\n        <h4 className=\"suffle__title\">과연 오늘의 점심 메뉴는?</h4>\n        <button className='handler neumo shuffle__start' onClick={onShuffle}>\n          <span>{!result ? \"메뉴 고르기 시작! 😜\" : '마음에 안들어 😥 다시!'}</span>\n        </button>\n        <section className=\"section section__shuffle\" ref={shuffleTarget}>\n          {selectedMenus.map((menu, i) => {\n            return menu.select ? <ShuffleItem key={`menu${i}`} name={menu.name} /> : null;\n          })}\n        </section> \n      </>\n      : <section className='section'>\n          <button className='handler neumo-active' onClick={_=> setIsPopup(!isPopup)}>\n            <svg className='icon' xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z\" />\n            </svg>\n            <span>메뉴 선택</span>\n          </button> \n          <div className=\"menu-none\">후보 메뉴를 먼저 선택하세요!</div>\n      </section>}\n    </main>\n\n    <section className={`popup ${isPopup ? 'block' : 'hidden'}`}>\n      <div className=\"popup__wrap\">\n        <h1 className=\"popup__title\">메뉴 후보 선택</h1>\n        <div className=\"popup__inner\">\n          <div className=\"popup__inner-handler\">\n            <div className=\"menu-all\">\n              <button className=\"menu-all__button neumo\" onClick={onAllSelect}>\n                {allSelected ? '전체 해제' : '전체 선택'}\n              </button>\n            </div>\n            <div className=\"menu-add\">\n              <input \n                className=\"menu-add__input\" \n                name=\"name\" \n                value={newMenu} \n                onChange={({target}) => setNewMenu(target.value)} \n                placeholder=\"메뉴 추가\"\n              />\n              <button className=\"menu-add__button\" onClick={onAddNewMenu}>\n                <svg className='icon' xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 9v3m0 0v3m0-3h3m-3 0H9m12 0a9 9 0 11-18 0 9 9 0 0118 0z\" />\n                </svg>\n              </button>\n            </div>\n          </div>\n        \n          <div className='menu-list'>\n            {menus.map((menu, i) => <SelectMenuItem key={`menu${i}`} menu={menu} onClick={onSelect} />)}\n          </div>\n\n          <button className='menu-add__insert neumo' onClick={onSelected}>\n            <svg className=\"icon\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M5 13l4 4L19 7\" />\n            </svg>\n            <span>선택완료</span>\n          </button>\n        </div>\n      </div>\n    </section>\n  </>\n}\n\nexport default App;\n","export const createMenuData = (menus) => {\r\n  const result = [];\r\n  for(let i = 0; i < menus.length; i++){\r\n    const data = {id: i, name: menus[i], select: false}\r\n    result.push(data);\r\n  }\r\n  return result;\r\n}\r\n\r\nexport function shuffleArray(a) { \r\n  var j, x, i; \r\n  for (i = a.length; i; i -= 1) { \r\n    j = Math.floor(Math.random() * i); \r\n    x = a[i - 1]; \r\n    a[i - 1] = a[j]; \r\n    a[j] = x; \r\n  } \r\n  return a;\r\n}\r\n","export default [\r\n  '한신 도떼기시장',\r\n  '이태리부대찌개',\r\n  '우리집 만두',\r\n  '청춘어람',\r\n  '중국집',\r\n  '소풍가자',\r\n  '두꺼비식당',\r\n  '일본벤토',\r\n  '김치찌개',\r\n  // '마라탕'\r\n]","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}